/*
H-RT Core - the core of the H-RayTracer ray tracing renderer.
Copyright (c) 2006-2010 H-RT Team.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/
#include "stdafx.h"
#include "RenderingContext.h"
#include "Scene.h"

namespace Hrt
{
	RenderingContext::RenderingContext(size_t threadId, CanvasPtr canvas, RandomizerPtr randomizer, std::vector<SamplerOwnedPtr> levelSamplers, shared_ptr<Scene>& scene)
		: m_threadId(threadId),
			m_canvas(canvas),
			m_randomizer(randomizer),
			m_levelSamplers(levelSamplers)
	{
		// resize levelSamples vector to fit 2D vectors generated by level samplers
		m_levelSamples.resize(2*m_levelSamplers.size());

		// check if samplers are correct
		int count = levelSamplers[0]->GetCount();
		for(size_t i=0; i<levelSamplers.size(); i++)
			if (levelSamplers[i]->GetCount() != count)
				throw InvalidArgumentException("Argument levelSamplers must contain samplers with the same sample count");

    int lightCount = scene->GetLightCount();
    for(int i=0; i<lightCount; i++)
      m_lights.push_back(scene->GetLight(i)->Clone());
	}

	void RenderingContext::ShuffleLevelSamplers()
	{
		BOOST_FOREACH(SamplerPtr sampler, m_levelSamplers)
		{
			sampler->Shuffle(m_randomizer);
		}
	}

	void RenderingContext::NextLevelSamples()
	{
		for(size_t i=0; i<m_levelSamplers.size(); i++)
			m_levelSamplers[i]->NextSample(&m_levelSamples[i*2], m_randomizer);
	}

}