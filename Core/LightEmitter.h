/*
H-RT Core - the core of the H-RayTracer ray tracing renderer.
Copyright (c) Patryk Bajer, H-RT.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
*/
#pragma once
#include "Common.h"
#include "Spectrum.h"
#include "RenderingContext.h"
#include "ISupportsConcurrency.h"

namespace Hrt
{
	struct RayLight;

	/// Abstract class for all light emitters (shapes that emits rays of light)
	class LightEmitter
		: public ISupportsConcurrency
	{
	public:
		/// Returns number of rays generated by this emitter.
		virtual uint GetRaysCount()=0;

		/// Returns area of this emitter.
		virtual number GetEmitterArea()=0;

		/// Prepares generation of rays to the specified point in world-space.
		/// \param target Target point if world-space.
		/// \param normal Normal vector to the surface.
		virtual void PrepareEmitter(const Vector3D& target, const Vector3D& normal, RenderingContext& rc)=0;

		/// Generates a single ray of light from this light emitter.
		/// \param ray Place for result.
		/// \return Returns true if ray has been generated or false if no more rays.
		virtual bool GenerateRayLight(RayLight* ray, number& pdf, RenderingContext& rc)=0;

		virtual void CalculateRadiance(const Vector3D& position, Vector3D& luminaireNormal, Spectrum& radiance)=0;

		virtual number CalculatePdf(const Vector3D& position, RenderingContext& rc)=0;

		/// Sets the power of this light emitter.
		virtual void SetPower(Spectrum power)
		{
			m_emitterPower = power;
		}

		/// Gets the power of this light emitter.
		Spectrum GetPower() const { return m_emitterPower; }

	protected:
		Spectrum m_emitterPower;
	};

	/// Reference to const shared-pointer of LightEmitter (used as params and returns)
	typedef const shared_ptr<LightEmitter>& LightEmitterPtr;
	
	/// Shared-pointer of LightEmitter (version for owners)
	typedef shared_ptr<LightEmitter> LightEmitterOwnedPtr;
}
